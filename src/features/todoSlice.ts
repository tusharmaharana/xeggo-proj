import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  getDocs,
} from "firebase/firestore";
import { AppThunk } from "../app/store";
import { db } from "../firebase";

export interface TodoState {
  status: "loading" | "idle";
  value: (ITodoIndexProps & IAddProps)[];
}

export interface IUserIdProps {
  uid: string;
}
export interface ITodoIndexProps {
  id: string;
}
export interface IAddProps {
  todo: string;
}

const initialState: TodoState = {
  status: "idle",
  value: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const todoSlice = createSlice({
  name: "todos",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addTodo: (state, action: PayloadAction<ITodoIndexProps & IAddProps>) => {
      if (!action.payload) return;
      state.value.push({ id: action.payload.id, todo: action.payload.todo });
    },
    removeTodo: (state, action: PayloadAction<string>) => {
      if (typeof action.payload !== "string") return;
      const index = state.value.findIndex((item) => item.id === action.payload);
      state.value.splice(index, 1);
    },
    setStatus: (state, action: PayloadAction<"loading" | "idle">) => {
      state.status = action.payload;
    },
    setTodoList: (
      state,
      action: PayloadAction<(ITodoIndexProps & IAddProps)[]>
    ) => {
      state.value = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { addTodo, removeTodo, setStatus, setTodoList } =
  todoSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.todo;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const add =
  ({ uid, todo }: IAddProps & IUserIdProps): AppThunk =>
  async (dispatch, getState) => {
    const docRef = await addDoc(collection(db, `${uid}`), {
      todo,
    });
    dispatch(addTodo({ id: docRef.id, todo }));
  };

export const remove =
  ({ uid, id }: IUserIdProps & ITodoIndexProps): AppThunk =>
  async (dispatch, getState) => {
    await deleteDoc(doc(db, `${uid}`, `${id}`));
    dispatch(removeTodo(id));
  };

export const setTodo =
  ({ uid }: IUserIdProps): AppThunk =>
  async (dispatch) => {
    const list: (ITodoIndexProps & IAddProps)[] = [];
    dispatch(setStatus("loading"));
    const querySnapshot = await getDocs(collection(db, `${uid}`));
    querySnapshot.forEach((item) => {
      list.push({ id: item.id, todo: item.data().todo });
    });
    dispatch(setTodoList(list));
    dispatch(setStatus("idle"));
  };

export default todoSlice.reducer;
